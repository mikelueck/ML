// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.1
// source: canbiocin/proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Canbiocin_CreateIngredient_FullMethodName = "/Canbiocin/CreateIngredient"
	Canbiocin_UpdateIngredient_FullMethodName = "/Canbiocin/UpdateIngredient"
	Canbiocin_ListIngredients_FullMethodName  = "/Canbiocin/ListIngredients"
	Canbiocin_CreateRecipe_FullMethodName     = "/Canbiocin/CreateRecipe"
	Canbiocin_UpdateRecipe_FullMethodName     = "/Canbiocin/UpdateRecipe"
	Canbiocin_ListRecipes_FullMethodName      = "/Canbiocin/ListRecipes"
	Canbiocin_CalculateRecipe_FullMethodName  = "/Canbiocin/CalculateRecipe"
)

// CanbiocinClient is the client API for Canbiocin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CanbiocinClient interface {
	CreateIngredient(ctx context.Context, in *CreateIngredientRequest, opts ...grpc.CallOption) (*CreateIngredientResponse, error)
	UpdateIngredient(ctx context.Context, in *UpdateIngredientRequest, opts ...grpc.CallOption) (*UpdateIngredientResponse, error)
	ListIngredients(ctx context.Context, in *ListIngredientsRequest, opts ...grpc.CallOption) (*ListIngredientsResponse, error)
	CreateRecipe(ctx context.Context, in *CreateRecipeRequest, opts ...grpc.CallOption) (*CreateRecipeResponse, error)
	UpdateRecipe(ctx context.Context, in *UpdateRecipeRequest, opts ...grpc.CallOption) (*UpdateRecipeResponse, error)
	ListRecipes(ctx context.Context, in *ListRecipesRequest, opts ...grpc.CallOption) (*ListRecipesResponse, error)
	CalculateRecipe(ctx context.Context, in *CalculateRecipeRequest, opts ...grpc.CallOption) (*CalculateRecipeResponse, error)
}

type canbiocinClient struct {
	cc grpc.ClientConnInterface
}

func NewCanbiocinClient(cc grpc.ClientConnInterface) CanbiocinClient {
	return &canbiocinClient{cc}
}

func (c *canbiocinClient) CreateIngredient(ctx context.Context, in *CreateIngredientRequest, opts ...grpc.CallOption) (*CreateIngredientResponse, error) {
	out := new(CreateIngredientResponse)
	err := c.cc.Invoke(ctx, Canbiocin_CreateIngredient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *canbiocinClient) UpdateIngredient(ctx context.Context, in *UpdateIngredientRequest, opts ...grpc.CallOption) (*UpdateIngredientResponse, error) {
	out := new(UpdateIngredientResponse)
	err := c.cc.Invoke(ctx, Canbiocin_UpdateIngredient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *canbiocinClient) ListIngredients(ctx context.Context, in *ListIngredientsRequest, opts ...grpc.CallOption) (*ListIngredientsResponse, error) {
	out := new(ListIngredientsResponse)
	err := c.cc.Invoke(ctx, Canbiocin_ListIngredients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *canbiocinClient) CreateRecipe(ctx context.Context, in *CreateRecipeRequest, opts ...grpc.CallOption) (*CreateRecipeResponse, error) {
	out := new(CreateRecipeResponse)
	err := c.cc.Invoke(ctx, Canbiocin_CreateRecipe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *canbiocinClient) UpdateRecipe(ctx context.Context, in *UpdateRecipeRequest, opts ...grpc.CallOption) (*UpdateRecipeResponse, error) {
	out := new(UpdateRecipeResponse)
	err := c.cc.Invoke(ctx, Canbiocin_UpdateRecipe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *canbiocinClient) ListRecipes(ctx context.Context, in *ListRecipesRequest, opts ...grpc.CallOption) (*ListRecipesResponse, error) {
	out := new(ListRecipesResponse)
	err := c.cc.Invoke(ctx, Canbiocin_ListRecipes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *canbiocinClient) CalculateRecipe(ctx context.Context, in *CalculateRecipeRequest, opts ...grpc.CallOption) (*CalculateRecipeResponse, error) {
	out := new(CalculateRecipeResponse)
	err := c.cc.Invoke(ctx, Canbiocin_CalculateRecipe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CanbiocinServer is the server API for Canbiocin service.
// All implementations should embed UnimplementedCanbiocinServer
// for forward compatibility
type CanbiocinServer interface {
	CreateIngredient(context.Context, *CreateIngredientRequest) (*CreateIngredientResponse, error)
	UpdateIngredient(context.Context, *UpdateIngredientRequest) (*UpdateIngredientResponse, error)
	ListIngredients(context.Context, *ListIngredientsRequest) (*ListIngredientsResponse, error)
	CreateRecipe(context.Context, *CreateRecipeRequest) (*CreateRecipeResponse, error)
	UpdateRecipe(context.Context, *UpdateRecipeRequest) (*UpdateRecipeResponse, error)
	ListRecipes(context.Context, *ListRecipesRequest) (*ListRecipesResponse, error)
	CalculateRecipe(context.Context, *CalculateRecipeRequest) (*CalculateRecipeResponse, error)
}

// UnimplementedCanbiocinServer should be embedded to have forward compatible implementations.
type UnimplementedCanbiocinServer struct {
}

func (UnimplementedCanbiocinServer) CreateIngredient(context.Context, *CreateIngredientRequest) (*CreateIngredientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIngredient not implemented")
}
func (UnimplementedCanbiocinServer) UpdateIngredient(context.Context, *UpdateIngredientRequest) (*UpdateIngredientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIngredient not implemented")
}
func (UnimplementedCanbiocinServer) ListIngredients(context.Context, *ListIngredientsRequest) (*ListIngredientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIngredients not implemented")
}
func (UnimplementedCanbiocinServer) CreateRecipe(context.Context, *CreateRecipeRequest) (*CreateRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipe not implemented")
}
func (UnimplementedCanbiocinServer) UpdateRecipe(context.Context, *UpdateRecipeRequest) (*UpdateRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipe not implemented")
}
func (UnimplementedCanbiocinServer) ListRecipes(context.Context, *ListRecipesRequest) (*ListRecipesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipes not implemented")
}
func (UnimplementedCanbiocinServer) CalculateRecipe(context.Context, *CalculateRecipeRequest) (*CalculateRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateRecipe not implemented")
}

// UnsafeCanbiocinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CanbiocinServer will
// result in compilation errors.
type UnsafeCanbiocinServer interface {
	mustEmbedUnimplementedCanbiocinServer()
}

func RegisterCanbiocinServer(s grpc.ServiceRegistrar, srv CanbiocinServer) {
	s.RegisterService(&Canbiocin_ServiceDesc, srv)
}

func _Canbiocin_CreateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanbiocinServer).CreateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Canbiocin_CreateIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanbiocinServer).CreateIngredient(ctx, req.(*CreateIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Canbiocin_UpdateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanbiocinServer).UpdateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Canbiocin_UpdateIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanbiocinServer).UpdateIngredient(ctx, req.(*UpdateIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Canbiocin_ListIngredients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIngredientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanbiocinServer).ListIngredients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Canbiocin_ListIngredients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanbiocinServer).ListIngredients(ctx, req.(*ListIngredientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Canbiocin_CreateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanbiocinServer).CreateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Canbiocin_CreateRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanbiocinServer).CreateRecipe(ctx, req.(*CreateRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Canbiocin_UpdateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanbiocinServer).UpdateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Canbiocin_UpdateRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanbiocinServer).UpdateRecipe(ctx, req.(*UpdateRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Canbiocin_ListRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecipesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanbiocinServer).ListRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Canbiocin_ListRecipes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanbiocinServer).ListRecipes(ctx, req.(*ListRecipesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Canbiocin_CalculateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanbiocinServer).CalculateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Canbiocin_CalculateRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanbiocinServer).CalculateRecipe(ctx, req.(*CalculateRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Canbiocin_ServiceDesc is the grpc.ServiceDesc for Canbiocin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Canbiocin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Canbiocin",
	HandlerType: (*CanbiocinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIngredient",
			Handler:    _Canbiocin_CreateIngredient_Handler,
		},
		{
			MethodName: "UpdateIngredient",
			Handler:    _Canbiocin_UpdateIngredient_Handler,
		},
		{
			MethodName: "ListIngredients",
			Handler:    _Canbiocin_ListIngredients_Handler,
		},
		{
			MethodName: "CreateRecipe",
			Handler:    _Canbiocin_CreateRecipe_Handler,
		},
		{
			MethodName: "UpdateRecipe",
			Handler:    _Canbiocin_UpdateRecipe_Handler,
		},
		{
			MethodName: "ListRecipes",
			Handler:    _Canbiocin_ListRecipes_Handler,
		},
		{
			MethodName: "CalculateRecipe",
			Handler:    _Canbiocin_CalculateRecipe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "canbiocin/proto/service.proto",
}
